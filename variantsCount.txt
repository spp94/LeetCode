#include <bits/stdc++.h> 

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'variantsCount' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER s0
 *  3. INTEGER k
 *  4. INTEGER b
 *  5. INTEGER m
 *  6. LONG_INTEGER a
 */
vector<int> array1;
long variantsCount(int n, int s0, int k, int b, int m, long a) {
  array1.push_back(s0);
  long temp;
  int t = n - 1;
  long result = 0;
  long previous = s0;
  int i = 1; 
  while(i < n){
    long tm = ((((k * previous)) + b) % m) + 1 + previous;
    array1.push_back(tm);
    previous = tm;
    i++;
  }
  i = 0;
  while (i < n && t >= i) {
    temp = a / array1[i];
    int j = t;
    while (j >= i) {
      if (temp >= array1[j]) {
        break;
      }
      j--;
    }
    if (j >= i) {
      result = result + 1 + (2 * (j - i));
    }
    t = j;
    i++;
  }
  return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string s0_temp;
    getline(cin, s0_temp);

    int s0 = stoi(ltrim(rtrim(s0_temp)));

    string k_temp;
    getline(cin, k_temp);

    int k = stoi(ltrim(rtrim(k_temp)));

    string b_temp;
    getline(cin, b_temp);

    int b = stoi(ltrim(rtrim(b_temp)));

    string m_temp;
    getline(cin, m_temp);

    int m = stoi(ltrim(rtrim(m_temp)));

    string a_temp;
    getline(cin, a_temp);

    long a = stol(ltrim(rtrim(a_temp)));

    long result = variantsCount(n, s0, k, b, m, a);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

import java.util.*;
public class Solution {
	public static boolean wildcardMatching(String pattern, String text) {
        int n = pattern.length(), m = text.length();
        int[][] dp = new int[n][m];
        for(int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(n-1, m-1, pattern, text, dp);
	}
    public static boolean f(int i, int j, String s, String t, int[][] dp) {
        if(i < 0 && j < 0) {
            return true;
        }
        if(i < 0 && j >= 0) {
            return false;
        }
        if(j < 0 && i >= 0) {
            for(int k = 0; k <= i; k++) {
                if(s.charAt(k) != '*') {
                    return false;
                }
            }
            return true;
        }
        if(dp[i][j] != -1) {
            return dp[i][j] == 1 ? true : false;
        }
        
        if((s.charAt(i) == t.charAt(j)) || s.charAt(i) == '?') {
            boolean flag = f(i-1, j-1, s, t, dp);
            dp[i][j] = flag ? 1 : 0;
            return flag;
        }
        if(s.charAt(i) == '*') {
            boolean flag = f(i-1, j, s, t, dp) || f(i, j-1, s, t, dp);
            dp[i][j] = flag ? 1 : 0;
            return flag;
        }
        dp[i][j] = 0;
        return false;
    }
}

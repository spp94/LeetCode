import java.util.*;
public class Solution {
	public static boolean canPartition(int[] arr, int n) {
		int target = 0;
        for(int num : arr) {
            target += num;
        }
        if(target % 2 == 1) {
            return false;
        }
        
        int total = target/2;
        int[][] dp = new int[n][total+1];
        for(int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(n-1, total, arr, dp);
	}
    public static boolean f(int i, int target, int[] arr, int[][] dp) {
        if(target == 0) {
            return true;
        }
        if(i == 0) {
            return arr[0] == target;
        }
        if(dp[i][target] != -1) {
            return dp[i][target] == 1;
        }
        
        boolean pick = false;
        if(target >= arr[i]) {
            pick = f(i-1, target-arr[i], arr, dp);
        }
        boolean notPick = f(i-1, target, arr, dp);
        
        dp[i][target] = pick || notPick ? 1 : 0;
        
        return pick || notPick;
    }
}

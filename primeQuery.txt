#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'primeQuery' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER_ARRAY first
 *  3. INTEGER_ARRAY second
 *  4. INTEGER_ARRAY values
 *  5. INTEGER_ARRAY queries
 */
vector< vector<int> >graph(100002);
void addedge(int u,int v){
    graph[u].push_back(v);
    graph[v].push_back(u);
}
bool isPrime[100002];
int dp[100002];
bool visited[100002];
vector<int> values(100002) ;
void dfs(int start) {
  visited[start] = true;
  if (isPrime[values[start - 1]])
    dp[start] = 1;
  else {
    dp[start] = 0;
  }
  for (int i = 0; i < graph[start].size(); i++) {
    if (!visited[graph[start][i]]) {
      dfs(graph[start][i]);
      dp[start] += dp[graph[start][i]];
    }
  }
  return;
}
vector<int> primeQuery(int n, vector<int> first, vector<int> second, vector<int> value, vector<int> queries) {
    memset(isPrime,true,sizeof(isPrime));
    memset(dp,0,sizeof(dp));
    isPrime[0]=false;
    isPrime[1]=false;
    memset(visited,0,sizeof(visited));
    for(int i=2;i<100001;i++){
        if(isPrime[i]){
            for(int j=i+i;j<100001;j+=i){
                isPrime[j]=false;
            }
        }
    }
    for(int i=0;i<value.size();i++){
        values[i]=value[i];
    }
    for(int i=0;i<first.size();i++){
        addedge(first[i],second[i]);
    }
    dfs(1);
    vector<int>ans;
    for(int i=0;i<queries.size();i++){
        ans.push_back(dp[queries[i]]);
    }
    return ans;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string first_count_temp;
    getline(cin, first_count_temp);

    int first_count = stoi(ltrim(rtrim(first_count_temp)));

    vector<int> first(first_count);

    for (int i = 0; i < first_count; i++) {
        string first_item_temp;
        getline(cin, first_item_temp);

        int first_item = stoi(ltrim(rtrim(first_item_temp)));

        first[i] = first_item;
    }

    string second_count_temp;
    getline(cin, second_count_temp);

    int second_count = stoi(ltrim(rtrim(second_count_temp)));

    vector<int> second(second_count);

    for (int i = 0; i < second_count; i++) {
        string second_item_temp;
        getline(cin, second_item_temp);

        int second_item = stoi(ltrim(rtrim(second_item_temp)));

        second[i] = second_item;
    }

    string values_count_temp;
    getline(cin, values_count_temp);

    int values_count = stoi(ltrim(rtrim(values_count_temp)));

    vector<int> values(values_count);

    for (int i = 0; i < values_count; i++) {
        string values_item_temp;
        getline(cin, values_item_temp);

        int values_item = stoi(ltrim(rtrim(values_item_temp)));

        values[i] = values_item;
    }

    string queries_count_temp;
    getline(cin, queries_count_temp);

    int queries_count = stoi(ltrim(rtrim(queries_count_temp)));

    vector<int> queries(queries_count);

    for (int i = 0; i < queries_count; i++) {
        string queries_item_temp;
        getline(cin, queries_item_temp);

        int queries_item = stoi(ltrim(rtrim(queries_item_temp)));

        queries[i] = queries_item;
    }

    vector<int> result = primeQuery(n, first, second, values, queries);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
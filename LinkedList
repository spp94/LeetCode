public class LinkedList {
	private int size;
	private class Node{
		private int value;
		private Node next;
		
		public Node(int value){
			this.value = value;
		}
	}
	private Node first = null, last = null; 
	private boolean isEmpty(){
		return first == null; // or return size == 0
	}
	public void addFirst(int item){
		Node node = new Node(item);
		if(isEmpty()){
			first = last = node;
		}
		else{
			node.next = first;
			first = node;
		}
		size++;
	}
	
	public void addLast(int item){
		Node node = new Node(item);
		if(isEmpty()){
			first = last = node;
		}
		else{
			last.next = node;
			last = node;
		}
		size++;
	}
	
	
	public void removeFirst(){
		if(isEmpty()){
			throw new IllegalArgumentException();
		}
		else if(first == last){
			first = last = null;
		}
		else{
			first = first.next;
		}
		size--;
	}
	
	public void removeLast(){
		if(isEmpty()){
			throw new IllegalArgumentException();
		}
		else if(first == last){
			first = last = null;
		}
		else{
			Node previous = getPreviousNode(last);
			previous.next = null;
			last = previous;
		}
		size--;
	}
	
	private Node getPreviousNode(Node node){
		Node current = first;
		while(current != null){
			if(current.next == node){
				return current;
			}
			current = current.next;
		}
		return null;
	}
	
	public int indexOf(int item){
		Node current = first;
		int index = 0;
		while(current != null){
			if(current.value == item){
				return index;
			}
			current = current.next;
			index++;
		}
		return -1;
	}
	
	public boolean contains(int item){
		return indexOf(item) != -1;
	}
	
	public void print(){
		Node current = first;
		while(current != null){
			System.out.print(current.value + " ");
			current = current.next;
		}
		System.out.println();
	}
	
	public void reverse(){
		Node previous = first;
		Node current = first.next;
		while(current != null){
			Node node = current.next;
			current.next = previous;
			previous = current;
			current = node;
		}
		last = first;
		last.next = null;
		first = previous;
	}
	
	public int getKthFromEnd(int k){
		if(isEmpty() || k > size || k < 0){
			throw new IllegalArgumentException();
		}
		Node previous = first;
		Node current = first;
		for(int i = 1; i < k; i++){
			if(current.next == null){
				throw new IllegalArgumentException();
			}
			current = current.next;
		}
		while(current != last){
			previous = previous.next;
			current = current.next;
		}
		return previous.value;
	}
	
	public void printMiddle(){
		if(isEmpty()){
			throw new IllegalArgumentException();
		}
		Node slow = first, fast = first;
		while(fast.next != last && fast != last ){
		    slow = slow.next;
		    fast = fast.next.next;
		}
		if(fast == last)
			System.out.println(slow.value);
		else
			System.out.println((slow.value + slow.next.value)/2);
	}
}

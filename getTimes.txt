#include <bits/stdc++.h> 

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'getTimes' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY time
 *  2. INTEGER_ARRAY direction
 */

vector<int> getTimes(vector<int> time, vector<int> direction) {
    queue<int>entry;
    queue<int>exit;
    
    int point=time[0],n=time.size(),last=-1;
    vector<int>ans(n);
    for (int i = 0; i < n;) {
      
      if (time[i] == point) {
        if (direction[i]==0){
            entry.push(i);
        }
        else{
            exit.push(i);
        }
        i++;

      }
      else{
          while(time[i]!=point && (!entry.empty() || !exit.empty())){
              if(exit.empty()){
                int l=entry.front();

                entry.pop();
                ans[l]=point;
                point++;
                last=0;
              }
              else if(entry.empty()){
                  int l=exit.front();

                  exit.pop();
                  ans[l]=point;
                  point++;
                  last=1;
              }
              else{
                  if(last==0){
                    int l = entry.front();
             
                    entry.pop();
                    ans[l] = point;
                    point++;
                    last=0;
                  }
                  else{
                    int l = exit.front();
             
                    exit.pop();
                    ans[l] = point;
                    point++;
                    last=1;
                  }
              }
          }
          if(entry.empty() && exit.empty() && point!=time[i]){
              point=time[i];
              last=1;
          }
      }
    }
    while ((!entry.empty() || !exit.empty())) {
      if (exit.empty()) {
        int l = entry.front();
    
        entry.pop();
        ans[l] = point;
        point++;
        last = 0;
      } else if (entry.empty()) {
        int l = exit.front();
    
        exit.pop();
        ans[l] = point;
        point++;
        last = 1;
      } else {
        if (last == 0) {
          int l = entry.front();
 
          entry.pop();
          ans[l] = point;
          point++;
          last = 0;
        } else {
          int l = exit.front();

          exit.pop();
          ans[l] = point;
          point++;
          last = 1;
        }
      }
    }
    return ans;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string time_count_temp;
    getline(cin, time_count_temp);

    int time_count = stoi(ltrim(rtrim(time_count_temp)));

    vector<int> time(time_count);

    for (int i = 0; i < time_count; i++) {
        string time_item_temp;
        getline(cin, time_item_temp);

        int time_item = stoi(ltrim(rtrim(time_item_temp)));

        time[i] = time_item;
    }

    string direction_count_temp;
    getline(cin, direction_count_temp);

    int direction_count = stoi(ltrim(rtrim(direction_count_temp)));

    vector<int> direction(direction_count);

    for (int i = 0; i < direction_count; i++) {
        string direction_item_temp;
        getline(cin, direction_item_temp);

        int direction_item = stoi(ltrim(rtrim(direction_item_temp)));

        direction[i] = direction_item;
    }

    vector<int> result = getTimes(time, direction);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

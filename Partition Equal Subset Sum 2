import java.util.*; 
public class Solution {
	public static boolean canPartition(int[] arr, int n) {
        int sum = 0;
        for(int num : arr) {
            sum += num;
        }
        if(sum % 2 == 1) {
            return false;
        }
        
        int target = sum/2;
        int[][] dp = new int[n][target+1];
        for(int[] row : dp) {
            Arrays.fill(row, -1);
        }
            
		return f(n-1, target, arr, dp);
	}
    public static boolean f(int index, int target, int[] arr, int[][] dp) {
        // Base case
        if(target == 0) {
            return true;
        }
        if(index == 0) {
            return target == arr[0];
        }
        if(dp[index][target] != -1) {
            return dp[index][target] == 1;
        }
        
        // Do all stuffs on the index
        // If the coin at index is picked
        boolean picked = false;
        if(target >= arr[index]) {
            picked = f(index-1, target-arr[index], arr, dp);
        }
        // If the coin at index is not picked
        boolean notPicked = f(index-1, target, arr, dp);
        
        dp[index][target] = picked || notPicked ? 1 : 0;
        return picked || notPicked;
    }
}

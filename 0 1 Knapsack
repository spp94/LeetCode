import java.util.*; 
public class Solution{  
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] dp = new int[n][maxWeight+1];
        for(int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(n-1, maxWeight, weight, value, dp);
    }
    static int f(int index, int W, int[] weight, int[] value, int[][] dp) {
        if(index == 0) {
            if(weight[0] <= W) {
                return value[0];
            }
            return 0;
        }
        if(dp[index][W] != -1) {
            return dp[index][W];
        }
        
        int pick = Integer.MIN_VALUE;
        if(weight[index] <= W) {
            pick = value[index] + f(index-1, W - weight[index], weight, value, dp);
        }
        int notPick = f(index-1, W, weight, value, dp);
        
        return dp[index][W] = Math.max(pick, notPick);
   }
}

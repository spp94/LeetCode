import java.util.*; 
public class Solution { 
	public static int maxProfit(ArrayList<Integer> prices, int n) {
        int[][][] dp = new int[n][2][3];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < 2; j++) {
                for(int k = 0; k < 3; k++) {
                    dp[i][j][k] = -1;
                }. 
            }
        }
		return f(0, 1, 2, prices, n, dp);
	}
    public static int f(int index, int buy, int capacity, ArrayList<Integer> prices, int n, int[][][] dp) {
        if(index == n || capacity == 0) {
            return 0;
        }
        if(dp[index][buy][capacity] != -1) {
            return dp[index][buy][capacity];
        }
        int profit = 0;
        if(buy == 1) {
            profit = Math.max(-prices.get(index) + f(index+1, 0, capacity, prices, n, dp),
                              0 + f(index+1, 1, capacity, prices, n, dp));
        }
        else {
            profit = Math.max(prices.get(index) + f(index+1, 1, capacity-1, prices, n, dp),
                              0 + f(index+1, 0, capacity, prices, n, dp));
        }
        
        return dp[index][buy][capacity] = profit;
    }
}

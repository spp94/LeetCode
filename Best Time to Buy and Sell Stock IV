import java.util.*; 
public class Solution
{
public static int maximumProfit(int[] prices, int n, int k){
    int[][][] dp = new int[n][2][k+1];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < 2; j++) {
            for(int kk = 0; kk <= k; kk++) {
                dp[i][j][kk] = -1;
            }
        }
    }
    return f(0, 1, k, n, prices, dp);
}
    public static int f(int index, int buy, int capacity, int n, int[] prices, int[][][] dp) {
        if(index == n || capacity == 0) {
            return 0;
        }
        if(dp[index][buy][capacity] != -1) {
            return dp[index][buy][capacity];
        }
        int profit = 0;
        if(buy == 1) {
            profit = Math.max(-prices[index] + f(index+1, 0, capacity, n, prices, dp),
                             0 + f(index+1, 1, capacity, n, prices, dp));
        }
        else {
            profit = Math.max(prices[index] + f(index+1, 1, capacity-1, n, prices, dp),
                              0 + f(index+1, 0, capacity, n, prices, dp));
        }
        
        return dp[index][buy][capacity] = profit;
    }
}

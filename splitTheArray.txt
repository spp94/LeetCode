#include <bits/stdc++.h>   

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'splitTheArray' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY val as parameter.
 */
bool isprime[1000002];
int splitTheArray(vector<int> val) {
    memset(isprime,true,sizeof(isprime));
    int n=val.size();
    unordered_map<int,int>m;
    for(int i=0;i<n;i++){
        m[val[i]]=1;
    }
    vector<vector<int>>p(1000001);
    for(int i=2;i<1000001;i++){
        if(isprime[i]){
          if (m[i] > 0) {
            
            p[i].push_back(i);
            // cout << p[j].size() << endl;
          }
          for (int j = i + i; j < 1000001; j += i) {
            if (m[j] > 0) {
              p[j].push_back(i);
            }
            isprime[j] = false;
            }
        }
    }
    int dp[n+1];
    memset(dp,0,sizeof(dp));
    vector<vector<int>>mp(1000001);
    for(int i=n-1;i>=0;i--){
        if(i==n-1){
            dp[i]=1;
            for(int j=0;j<p[val[i]].size();j++){
                mp[p[val[i]][j]].push_back(i);
            }
        }
        else{
            int minfind=1+dp[i+1];
            for (int j = 0; j < p[val[i]].size(); j++) {
                int factor=p[val[i]][j];
                for(int k=0;k<mp[factor].size();k++){
                    //cout<<mp[factor].size()<<" "<<factor<<" "<<mp[factor][k]<<endl;
                    minfind=min(minfind,dp[mp[factor][k]+1]+1);
                }
                mp[p[val[i]][j]].push_back(i);
            }
            //cout<<minfind<<" "<<i<<endl;
            dp[i]=minfind;
        }
    }
    for(int i=n-1;i>=0;i--){
        cout<<i<<" "<<dp[i]<<endl;
    }
    return dp[0];
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string val_count_temp;
    getline(cin, val_count_temp);

    int val_count = stoi(ltrim(rtrim(val_count_temp)));

    vector<int> val(val_count);

    for (int i = 0; i < val_count; i++) {
        string val_item_temp;
        getline(cin, val_item_temp);

        int val_item = stoi(ltrim(rtrim(val_item_temp)));

        val[i] = val_item;
    }

    int result = splitTheArray(val);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

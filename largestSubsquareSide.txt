#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);



/*
 * Complete the 'largestSubsquareSide' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. 2D_INTEGER_ARRAY grid
 *  2. INTEGER k
 */

int largestSubsquareSide(vector<vector<int>> grid, int k) {
  int n = grid.size();
  int max_array[n + 1];
  max_array[0] = 0;
  max_array[n + 1] = INT_MIN;
  int len = 1;
  int i = 0;
  while(i < n) {
      int j = 0;
    while(j < n) {
      if (max_array[len] < grid[i][j]) {
        max_array[len] = grid[i][j];
      }
      if (j >= 1) {
        grid[i][j] = grid[i][j] + grid[i][j - 1];
      }
      j++;
    }
    i++;
  }

  i = 0;
  while(i < n) {
      int j = 0;
    while(j < n) {
      if (j >= 1) {
        grid[j][i] = grid[j][i] + grid[j - 1][i];
      }
      j++;
    }
    i++;
  }

  len++;
  while (len < n + 1) {
    max_array[len] = INT_MIN;
    int i = len - 1;
    while (i < n) {
      int j = i;
      while (j < n) {
        int tmp = grid[i][j];
        int a = i - (len - 1);
        int b = j - (len - 1);
        if (a  >= 1) {
          tmp = tmp - grid[a - 1][j];
        }
        if (b  >= 1) {
          tmp = tmp - grid[i][b - 1];
        }
        if (a  >= 1 && b >= 1) {
          tmp = tmp + grid[a - 1][b - 1];
        }
        if (max_array[len] < tmp) {
          max_array[len] = tmp;
        }
        j++;
      }
      i++;
    }
    len++;
  }
  int result;
  i = 0;
  while (i < n + 1) {
    cout << max_array[i] << endl;
    if (max_array[n] <= k) {
      result = n;
    } else {
      bool flag = false;
      int i = n - 1;
      while (i > 0) {
        if (max_array[i] <= k) {
          flag = true;
          break;
        }
        i--;
      }
      if (flag) {
        result = i;
      }
    }
    i++;
  }
  return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string grid_rows_temp;
    getline(cin, grid_rows_temp);

    int grid_rows = stoi(ltrim(rtrim(grid_rows_temp)));

    string grid_columns_temp;
    getline(cin, grid_columns_temp);

    int grid_columns = stoi(ltrim(rtrim(grid_columns_temp)));

    vector<vector<int>> grid(grid_rows);

    for (int i = 0; i < grid_rows; i++) {
        grid[i].resize(grid_columns);

        string grid_row_temp_temp;
        getline(cin, grid_row_temp_temp);

        vector<string> grid_row_temp = split(rtrim(grid_row_temp_temp));

        for (int j = 0; j < grid_columns; j++) {
            int grid_row_item = stoi(grid_row_temp[j]);

            grid[i][j] = grid_row_item;
        }
    }

    string k_temp;
    getline(cin, k_temp);

    int k = stoi(ltrim(rtrim(k_temp)));

    int result = largestSubsquareSide(grid, k);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
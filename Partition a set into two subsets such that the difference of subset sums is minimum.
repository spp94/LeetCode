public class Solution {
	public static int minSubsetSumDifference(int[] arr, int n) {
		return f(arr, n);
	}
    
    public static int f(int[] arr, int n) {
        int sum = 0;
        for(int num : arr) {
            sum += num;
        }
        boolean[][] dp = new boolean[n][sum+1];
        for(int i=0; i < n; i++) {
            dp[i][0] = true;
        }
        for(int i = 0; i <= sum; i++) {
            if(arr[0] == i) {
                dp[0][i] = true;
            }
            else {
                dp[0][i] = false;
            }
        }
        
        for(int i = 1; i < n; i++) {
            for(int j = 1; j <= sum; j++) {
                if(j < arr[i]) {
                    dp[i][j] = dp[i-1][j];
                }
                else {
                    dp[i][j] = dp[i-1][j] || dp[i-1][j - arr[i]];
                }
            }
        }
        
        int min = Integer.MAX_VALUE;
        for(int i = 0; i <= sum; i++) {
            if(dp[n-1][i] == true) {
                min = Math.min(min, Math.abs((sum - i) - i));
            }
        }
        
        return min;
    }
}
